// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: votesystem/voting/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetVoteRecordRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetVoteRecordRequest) Reset()         { *m = QueryGetVoteRecordRequest{} }
func (m *QueryGetVoteRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteRecordRequest) ProtoMessage()    {}
func (*QueryGetVoteRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{2}
}
func (m *QueryGetVoteRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteRecordRequest.Merge(m, src)
}
func (m *QueryGetVoteRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteRecordRequest proto.InternalMessageInfo

func (m *QueryGetVoteRecordRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetVoteRecordResponse struct {
	VoteRecord VoteRecord `protobuf:"bytes,1,opt,name=VoteRecord,proto3" json:"VoteRecord"`
}

func (m *QueryGetVoteRecordResponse) Reset()         { *m = QueryGetVoteRecordResponse{} }
func (m *QueryGetVoteRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteRecordResponse) ProtoMessage()    {}
func (*QueryGetVoteRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{3}
}
func (m *QueryGetVoteRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteRecordResponse.Merge(m, src)
}
func (m *QueryGetVoteRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteRecordResponse proto.InternalMessageInfo

func (m *QueryGetVoteRecordResponse) GetVoteRecord() VoteRecord {
	if m != nil {
		return m.VoteRecord
	}
	return VoteRecord{}
}

type QueryAllVoteRecordRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteRecordRequest) Reset()         { *m = QueryAllVoteRecordRequest{} }
func (m *QueryAllVoteRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteRecordRequest) ProtoMessage()    {}
func (*QueryAllVoteRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{4}
}
func (m *QueryAllVoteRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteRecordRequest.Merge(m, src)
}
func (m *QueryAllVoteRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteRecordRequest proto.InternalMessageInfo

func (m *QueryAllVoteRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoteRecordResponse struct {
	VoteRecord []VoteRecord        `protobuf:"bytes,1,rep,name=VoteRecord,proto3" json:"VoteRecord"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteRecordResponse) Reset()         { *m = QueryAllVoteRecordResponse{} }
func (m *QueryAllVoteRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteRecordResponse) ProtoMessage()    {}
func (*QueryAllVoteRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{5}
}
func (m *QueryAllVoteRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteRecordResponse.Merge(m, src)
}
func (m *QueryAllVoteRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteRecordResponse proto.InternalMessageInfo

func (m *QueryAllVoteRecordResponse) GetVoteRecord() []VoteRecord {
	if m != nil {
		return m.VoteRecord
	}
	return nil
}

func (m *QueryAllVoteRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHasVotedVoterRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetHasVotedVoterRequest) Reset()         { *m = QueryGetHasVotedVoterRequest{} }
func (m *QueryGetHasVotedVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHasVotedVoterRequest) ProtoMessage()    {}
func (*QueryGetHasVotedVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{6}
}
func (m *QueryGetHasVotedVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHasVotedVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHasVotedVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHasVotedVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHasVotedVoterRequest.Merge(m, src)
}
func (m *QueryGetHasVotedVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHasVotedVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHasVotedVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHasVotedVoterRequest proto.InternalMessageInfo

func (m *QueryGetHasVotedVoterRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetHasVotedVoterResponse struct {
	HasVotedVoter HasVotedVoter `protobuf:"bytes,1,opt,name=hasVotedVoter,proto3" json:"hasVotedVoter"`
}

func (m *QueryGetHasVotedVoterResponse) Reset()         { *m = QueryGetHasVotedVoterResponse{} }
func (m *QueryGetHasVotedVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHasVotedVoterResponse) ProtoMessage()    {}
func (*QueryGetHasVotedVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{7}
}
func (m *QueryGetHasVotedVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHasVotedVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHasVotedVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHasVotedVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHasVotedVoterResponse.Merge(m, src)
}
func (m *QueryGetHasVotedVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHasVotedVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHasVotedVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHasVotedVoterResponse proto.InternalMessageInfo

func (m *QueryGetHasVotedVoterResponse) GetHasVotedVoter() HasVotedVoter {
	if m != nil {
		return m.HasVotedVoter
	}
	return HasVotedVoter{}
}

type QueryAllHasVotedVoterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHasVotedVoterRequest) Reset()         { *m = QueryAllHasVotedVoterRequest{} }
func (m *QueryAllHasVotedVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHasVotedVoterRequest) ProtoMessage()    {}
func (*QueryAllHasVotedVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{8}
}
func (m *QueryAllHasVotedVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHasVotedVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHasVotedVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHasVotedVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHasVotedVoterRequest.Merge(m, src)
}
func (m *QueryAllHasVotedVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHasVotedVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHasVotedVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHasVotedVoterRequest proto.InternalMessageInfo

func (m *QueryAllHasVotedVoterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHasVotedVoterResponse struct {
	HasVotedVoter []HasVotedVoter     `protobuf:"bytes,1,rep,name=hasVotedVoter,proto3" json:"hasVotedVoter"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHasVotedVoterResponse) Reset()         { *m = QueryAllHasVotedVoterResponse{} }
func (m *QueryAllHasVotedVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHasVotedVoterResponse) ProtoMessage()    {}
func (*QueryAllHasVotedVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{9}
}
func (m *QueryAllHasVotedVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHasVotedVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHasVotedVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHasVotedVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHasVotedVoterResponse.Merge(m, src)
}
func (m *QueryAllHasVotedVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHasVotedVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHasVotedVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHasVotedVoterResponse proto.InternalMessageInfo

func (m *QueryAllHasVotedVoterResponse) GetHasVotedVoter() []HasVotedVoter {
	if m != nil {
		return m.HasVotedVoter
	}
	return nil
}

func (m *QueryAllHasVotedVoterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetElectionResultRequest struct {
	ElectionID string `protobuf:"bytes,1,opt,name=electionID,proto3" json:"electionID,omitempty"`
}

func (m *QueryGetElectionResultRequest) Reset()         { *m = QueryGetElectionResultRequest{} }
func (m *QueryGetElectionResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetElectionResultRequest) ProtoMessage()    {}
func (*QueryGetElectionResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{10}
}
func (m *QueryGetElectionResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetElectionResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetElectionResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetElectionResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetElectionResultRequest.Merge(m, src)
}
func (m *QueryGetElectionResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetElectionResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetElectionResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetElectionResultRequest proto.InternalMessageInfo

func (m *QueryGetElectionResultRequest) GetElectionID() string {
	if m != nil {
		return m.ElectionID
	}
	return ""
}

type QueryGetElectionResultResponse struct {
	ElectionId string            `protobuf:"bytes,1,opt,name=election_id,json=electionId,proto3" json:"election_id,omitempty"`
	Results    map[string]uint64 `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *QueryGetElectionResultResponse) Reset()         { *m = QueryGetElectionResultResponse{} }
func (m *QueryGetElectionResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetElectionResultResponse) ProtoMessage()    {}
func (*QueryGetElectionResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_de7af5d9d6db0db8, []int{11}
}
func (m *QueryGetElectionResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetElectionResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetElectionResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetElectionResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetElectionResultResponse.Merge(m, src)
}
func (m *QueryGetElectionResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetElectionResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetElectionResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetElectionResultResponse proto.InternalMessageInfo

func (m *QueryGetElectionResultResponse) GetElectionId() string {
	if m != nil {
		return m.ElectionId
	}
	return ""
}

func (m *QueryGetElectionResultResponse) GetResults() map[string]uint64 {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "votesystem.voting.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "votesystem.voting.QueryParamsResponse")
	proto.RegisterType((*QueryGetVoteRecordRequest)(nil), "votesystem.voting.QueryGetVoteRecordRequest")
	proto.RegisterType((*QueryGetVoteRecordResponse)(nil), "votesystem.voting.QueryGetVoteRecordResponse")
	proto.RegisterType((*QueryAllVoteRecordRequest)(nil), "votesystem.voting.QueryAllVoteRecordRequest")
	proto.RegisterType((*QueryAllVoteRecordResponse)(nil), "votesystem.voting.QueryAllVoteRecordResponse")
	proto.RegisterType((*QueryGetHasVotedVoterRequest)(nil), "votesystem.voting.QueryGetHasVotedVoterRequest")
	proto.RegisterType((*QueryGetHasVotedVoterResponse)(nil), "votesystem.voting.QueryGetHasVotedVoterResponse")
	proto.RegisterType((*QueryAllHasVotedVoterRequest)(nil), "votesystem.voting.QueryAllHasVotedVoterRequest")
	proto.RegisterType((*QueryAllHasVotedVoterResponse)(nil), "votesystem.voting.QueryAllHasVotedVoterResponse")
	proto.RegisterType((*QueryGetElectionResultRequest)(nil), "votesystem.voting.QueryGetElectionResultRequest")
	proto.RegisterType((*QueryGetElectionResultResponse)(nil), "votesystem.voting.QueryGetElectionResultResponse")
	proto.RegisterMapType((map[string]uint64)(nil), "votesystem.voting.QueryGetElectionResultResponse.ResultsEntry")
}

func init() { proto.RegisterFile("votesystem/voting/query.proto", fileDescriptor_de7af5d9d6db0db8) }

var fileDescriptor_de7af5d9d6db0db8 = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x4f, 0xd4, 0x5a,
	0x14, 0xc0, 0xa7, 0xc3, 0xbf, 0xbc, 0xc3, 0xe3, 0x05, 0xee, 0x63, 0xc1, 0x8c, 0x50, 0xb0, 0x08,
	0x18, 0xc0, 0x5e, 0xfe, 0x68, 0x34, 0x98, 0x68, 0x40, 0x11, 0x4d, 0x8c, 0xc1, 0x2e, 0x8c, 0x71,
	0x33, 0x29, 0xd3, 0x6b, 0x69, 0xec, 0xf4, 0x0e, 0xbd, 0x9d, 0x09, 0x23, 0x61, 0xe3, 0x27, 0x30,
	0xd1, 0xb8, 0x77, 0xe3, 0xc2, 0xbd, 0xc6, 0x8f, 0xc0, 0x92, 0xc4, 0x85, 0xae, 0x8c, 0x01, 0x3f,
	0x88, 0xe9, 0xbd, 0x77, 0x9c, 0xd6, 0xb6, 0x33, 0x40, 0xd8, 0x4c, 0x7a, 0xef, 0xf9, 0xf7, 0x3b,
	0xe7, 0xf4, 0x9c, 0x0e, 0x8c, 0xd5, 0x69, 0x40, 0x58, 0x83, 0x05, 0xa4, 0x82, 0xeb, 0x34, 0x70,
	0x3c, 0x1b, 0xef, 0xd4, 0x88, 0xdf, 0xd0, 0xab, 0x3e, 0x0d, 0x28, 0x1a, 0x6a, 0x89, 0x75, 0x21,
	0x2e, 0x0e, 0xdb, 0xd4, 0xa6, 0x5c, 0x8a, 0xc3, 0x27, 0xa1, 0x58, 0x1c, 0xb5, 0x29, 0xb5, 0x5d,
	0x82, 0xcd, 0xaa, 0x83, 0x4d, 0xcf, 0xa3, 0x81, 0x19, 0x38, 0xd4, 0x63, 0x52, 0x3a, 0x5b, 0xa6,
	0xac, 0x42, 0x19, 0xde, 0x32, 0x19, 0x11, 0xfe, 0x71, 0x7d, 0x71, 0x8b, 0x04, 0xe6, 0x22, 0xae,
	0x9a, 0xb6, 0xe3, 0x71, 0x65, 0xa9, 0xab, 0x26, 0x89, 0xaa, 0xa6, 0x6f, 0x56, 0x9a, 0xbe, 0x26,
	0x93, 0xf2, 0xf0, 0xa6, 0xe4, 0x93, 0x32, 0xf5, 0x2d, 0xa9, 0x34, 0x93, 0x54, 0xda, 0x36, 0x59,
	0x29, 0xbc, 0xb5, 0xf8, 0xaf, 0x2f, 0x14, 0xb5, 0x61, 0x40, 0x8f, 0x43, 0x9e, 0x4d, 0x1e, 0xc2,
	0x20, 0x3b, 0x35, 0xc2, 0x02, 0xed, 0x11, 0xfc, 0x1f, 0xbb, 0x65, 0x55, 0xea, 0x31, 0x82, 0xae,
	0x43, 0xaf, 0x40, 0x19, 0x51, 0x26, 0x94, 0xcb, 0xfd, 0x4b, 0x05, 0x3d, 0x51, 0x1e, 0x5d, 0x98,
	0xac, 0x75, 0x1f, 0xfc, 0x18, 0xcf, 0x19, 0x52, 0x5d, 0x9b, 0x83, 0x02, 0xf7, 0xb7, 0x41, 0x82,
	0x27, 0x34, 0x20, 0x06, 0x47, 0x95, 0xc1, 0xd0, 0x7f, 0x90, 0x77, 0x2c, 0xee, 0xb1, 0xdb, 0xc8,
	0x3b, 0x96, 0x66, 0x42, 0x31, 0x4d, 0x59, 0x32, 0xdc, 0x01, 0x68, 0xdd, 0x4a, 0x8e, 0xb1, 0x14,
	0x8e, 0x96, 0x92, 0x64, 0x89, 0x98, 0x69, 0x65, 0xc9, 0xb3, 0xea, 0xba, 0x49, 0x9e, 0x7b, 0x00,
	0xad, 0xa6, 0xc8, 0x08, 0xd3, 0xba, 0xe8, 0xa0, 0x1e, 0x76, 0x50, 0x17, 0x6f, 0x88, 0xec, 0xa0,
	0xbe, 0x69, 0xda, 0x44, 0xda, 0x1a, 0x11, 0x4b, 0xed, 0xa3, 0x22, 0x13, 0xf9, 0x2b, 0x4a, 0x46,
	0x22, 0x5d, 0x67, 0x48, 0x04, 0x6d, 0xc4, 0x58, 0xf3, 0x9c, 0x75, 0xa6, 0x23, 0xab, 0x20, 0x88,
	0xc1, 0x5e, 0x85, 0xd1, 0x66, 0xd1, 0xef, 0x9b, 0x2c, 0x8c, 0x60, 0x85, 0x3f, 0x7e, 0xb3, 0x28,
	0xc3, 0xd0, 0xe3, 0x78, 0x16, 0xd9, 0xe5, 0xf5, 0xf8, 0xc7, 0x10, 0x07, 0xad, 0x02, 0x63, 0x19,
	0x56, 0x32, 0xc9, 0x87, 0x30, 0xb0, 0x1d, 0x15, 0xc8, 0x72, 0x4e, 0xa4, 0xe4, 0x19, 0x73, 0x20,
	0x53, 0x8d, 0x1b, 0x6b, 0xcf, 0x25, 0xe4, 0xaa, 0xeb, 0xa6, 0x42, 0x9e, 0x57, 0xe7, 0x3e, 0x2b,
	0x32, 0xaf, 0x64, 0xa0, 0xec, 0xbc, 0xba, 0xce, 0x9c, 0xd7, 0xf9, 0x75, 0xf1, 0x76, 0xab, 0x1f,
	0xeb, 0x2e, 0x29, 0x87, 0x77, 0x06, 0x61, 0x35, 0x37, 0x68, 0x56, 0x48, 0x05, 0x20, 0x52, 0xf0,
	0xe0, 0xae, 0xec, 0x65, 0xe4, 0x46, 0xfb, 0xa6, 0x80, 0x9a, 0xe5, 0x41, 0xa6, 0x3e, 0x0e, 0xfd,
	0x4d, 0x83, 0x92, 0x9c, 0xdb, 0xa8, 0x0f, 0x0b, 0x3d, 0x85, 0x3e, 0x9f, 0x9b, 0xb0, 0x91, 0x3c,
	0xaf, 0xca, 0xad, 0x94, 0xaa, 0xb4, 0x0f, 0xa2, 0x8b, 0x23, 0x5b, 0xf7, 0x02, 0xbf, 0x61, 0x34,
	0xdd, 0x15, 0x57, 0xe0, 0xdf, 0xa8, 0x00, 0x0d, 0x42, 0xd7, 0x0b, 0xd2, 0x90, 0x08, 0xe1, 0x63,
	0xf8, 0x9a, 0xd6, 0x4d, 0xb7, 0x46, 0x78, 0x11, 0xbb, 0x0d, 0x71, 0x58, 0xc9, 0xdf, 0x50, 0x96,
	0xbe, 0xf4, 0x41, 0x0f, 0x0f, 0x8a, 0x5e, 0x42, 0xaf, 0x58, 0x52, 0x68, 0x2a, 0x0b, 0x2c, 0xb6,
	0x0d, 0x8b, 0xd3, 0x9d, 0xd4, 0x04, 0xb4, 0x76, 0xf1, 0xd5, 0xd7, 0x5f, 0x6f, 0xf2, 0x17, 0x50,
	0x01, 0x67, 0xad, 0x70, 0xf4, 0x4e, 0x89, 0x4e, 0x3d, 0x9a, 0x6f, 0x53, 0x99, 0xc4, 0x62, 0x2a,
	0x5e, 0x39, 0xa1, 0xb6, 0xc4, 0x99, 0xe3, 0x38, 0x53, 0x68, 0x12, 0xb7, 0xfd, 0x62, 0xe0, 0x3d,
	0xc7, 0xda, 0x47, 0x6f, 0x15, 0x18, 0x68, 0xf9, 0x58, 0x75, 0xdd, 0x6c, 0xb6, 0xb4, 0xa5, 0x99,
	0xcd, 0x96, 0xba, 0xfc, 0xb4, 0x69, 0xce, 0x36, 0x81, 0xd4, 0xf6, 0x6c, 0xe8, 0x83, 0x02, 0x03,
	0xb1, 0x01, 0x42, 0xb8, 0x4d, 0x11, 0xd2, 0x96, 0x42, 0x71, 0xe1, 0xe4, 0x06, 0x12, 0x6e, 0x89,
	0xc3, 0xcd, 0xa3, 0x59, 0xdc, 0xf1, 0x2b, 0x8a, 0xf7, 0xf8, 0x22, 0xdc, 0x47, 0xef, 0x15, 0x18,
	0x8c, 0x79, 0x0b, 0x4b, 0x88, 0xdb, 0x14, 0xe5, 0x74, 0xac, 0x59, 0x8b, 0x48, 0x9b, 0xe5, 0xac,
	0x97, 0x90, 0xd6, 0x99, 0x15, 0x7d, 0x52, 0x60, 0x28, 0x31, 0x72, 0x68, 0xe1, 0x14, 0xd3, 0x29,
	0x28, 0x17, 0x4f, 0x3d, 0xcf, 0xda, 0x4d, 0x8e, 0x79, 0x0d, 0x2d, 0xa7, 0x60, 0xda, 0x24, 0x28,
	0xfd, 0xd9, 0x28, 0x62, 0xd4, 0xf1, 0x5e, 0x6b, 0x27, 0xed, 0xaf, 0x2d, 0x1f, 0x1c, 0xa9, 0xca,
	0xe1, 0x91, 0xaa, 0xfc, 0x3c, 0x52, 0x95, 0xd7, 0xc7, 0x6a, 0xee, 0xf0, 0x58, 0xcd, 0x7d, 0x3f,
	0x56, 0x73, 0xcf, 0x0a, 0x11, 0x6f, 0xbb, 0x4d, 0x7f, 0x41, 0xa3, 0x4a, 0xd8, 0x56, 0x2f, 0xff,
	0x7f, 0xb3, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x23, 0xdb, 0x83, 0xe1, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of VoteRecord items.
	VoteRecord(ctx context.Context, in *QueryGetVoteRecordRequest, opts ...grpc.CallOption) (*QueryGetVoteRecordResponse, error)
	VoteRecordAll(ctx context.Context, in *QueryAllVoteRecordRequest, opts ...grpc.CallOption) (*QueryAllVoteRecordResponse, error)
	// Queries a list of HasVotedVoter items.
	HasVotedVoter(ctx context.Context, in *QueryGetHasVotedVoterRequest, opts ...grpc.CallOption) (*QueryGetHasVotedVoterResponse, error)
	HasVotedVoterAll(ctx context.Context, in *QueryAllHasVotedVoterRequest, opts ...grpc.CallOption) (*QueryAllHasVotedVoterResponse, error)
	// Queries a list of GetElectionResult items.
	GetElectionResult(ctx context.Context, in *QueryGetElectionResultRequest, opts ...grpc.CallOption) (*QueryGetElectionResultResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/votesystem.voting.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteRecord(ctx context.Context, in *QueryGetVoteRecordRequest, opts ...grpc.CallOption) (*QueryGetVoteRecordResponse, error) {
	out := new(QueryGetVoteRecordResponse)
	err := c.cc.Invoke(ctx, "/votesystem.voting.Query/VoteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteRecordAll(ctx context.Context, in *QueryAllVoteRecordRequest, opts ...grpc.CallOption) (*QueryAllVoteRecordResponse, error) {
	out := new(QueryAllVoteRecordResponse)
	err := c.cc.Invoke(ctx, "/votesystem.voting.Query/VoteRecordAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HasVotedVoter(ctx context.Context, in *QueryGetHasVotedVoterRequest, opts ...grpc.CallOption) (*QueryGetHasVotedVoterResponse, error) {
	out := new(QueryGetHasVotedVoterResponse)
	err := c.cc.Invoke(ctx, "/votesystem.voting.Query/HasVotedVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HasVotedVoterAll(ctx context.Context, in *QueryAllHasVotedVoterRequest, opts ...grpc.CallOption) (*QueryAllHasVotedVoterResponse, error) {
	out := new(QueryAllHasVotedVoterResponse)
	err := c.cc.Invoke(ctx, "/votesystem.voting.Query/HasVotedVoterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetElectionResult(ctx context.Context, in *QueryGetElectionResultRequest, opts ...grpc.CallOption) (*QueryGetElectionResultResponse, error) {
	out := new(QueryGetElectionResultResponse)
	err := c.cc.Invoke(ctx, "/votesystem.voting.Query/GetElectionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of VoteRecord items.
	VoteRecord(context.Context, *QueryGetVoteRecordRequest) (*QueryGetVoteRecordResponse, error)
	VoteRecordAll(context.Context, *QueryAllVoteRecordRequest) (*QueryAllVoteRecordResponse, error)
	// Queries a list of HasVotedVoter items.
	HasVotedVoter(context.Context, *QueryGetHasVotedVoterRequest) (*QueryGetHasVotedVoterResponse, error)
	HasVotedVoterAll(context.Context, *QueryAllHasVotedVoterRequest) (*QueryAllHasVotedVoterResponse, error)
	// Queries a list of GetElectionResult items.
	GetElectionResult(context.Context, *QueryGetElectionResultRequest) (*QueryGetElectionResultResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VoteRecord(ctx context.Context, req *QueryGetVoteRecordRequest) (*QueryGetVoteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRecord not implemented")
}
func (*UnimplementedQueryServer) VoteRecordAll(ctx context.Context, req *QueryAllVoteRecordRequest) (*QueryAllVoteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRecordAll not implemented")
}
func (*UnimplementedQueryServer) HasVotedVoter(ctx context.Context, req *QueryGetHasVotedVoterRequest) (*QueryGetHasVotedVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasVotedVoter not implemented")
}
func (*UnimplementedQueryServer) HasVotedVoterAll(ctx context.Context, req *QueryAllHasVotedVoterRequest) (*QueryAllHasVotedVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasVotedVoterAll not implemented")
}
func (*UnimplementedQueryServer) GetElectionResult(ctx context.Context, req *QueryGetElectionResultRequest) (*QueryGetElectionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElectionResult not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votesystem.voting.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votesystem.voting.Query/VoteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteRecord(ctx, req.(*QueryGetVoteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVoteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votesystem.voting.Query/VoteRecordAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteRecordAll(ctx, req.(*QueryAllVoteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HasVotedVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHasVotedVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HasVotedVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votesystem.voting.Query/HasVotedVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HasVotedVoter(ctx, req.(*QueryGetHasVotedVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HasVotedVoterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHasVotedVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HasVotedVoterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votesystem.voting.Query/HasVotedVoterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HasVotedVoterAll(ctx, req.(*QueryAllHasVotedVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetElectionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetElectionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetElectionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/votesystem.voting.Query/GetElectionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetElectionResult(ctx, req.(*QueryGetElectionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votesystem.voting.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VoteRecord",
			Handler:    _Query_VoteRecord_Handler,
		},
		{
			MethodName: "VoteRecordAll",
			Handler:    _Query_VoteRecordAll_Handler,
		},
		{
			MethodName: "HasVotedVoter",
			Handler:    _Query_HasVotedVoter_Handler,
		},
		{
			MethodName: "HasVotedVoterAll",
			Handler:    _Query_HasVotedVoterAll_Handler,
		},
		{
			MethodName: "GetElectionResult",
			Handler:    _Query_GetElectionResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "votesystem/voting/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VoteRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoteRecord) > 0 {
		for iNdEx := len(m.VoteRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHasVotedVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHasVotedVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHasVotedVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHasVotedVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHasVotedVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHasVotedVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HasVotedVoter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHasVotedVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHasVotedVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHasVotedVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHasVotedVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHasVotedVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHasVotedVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HasVotedVoter) > 0 {
		for iNdEx := len(m.HasVotedVoter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HasVotedVoter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetElectionResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetElectionResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetElectionResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ElectionID) > 0 {
		i -= len(m.ElectionID)
		copy(dAtA[i:], m.ElectionID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ElectionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetElectionResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetElectionResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetElectionResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for k := range m.Results {
			v := m.Results[k]
			baseI := i
			i = encodeVarintQuery(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ElectionId) > 0 {
		i -= len(m.ElectionId)
		copy(dAtA[i:], m.ElectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ElectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetVoteRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetVoteRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VoteRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVoteRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVoteRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoteRecord) > 0 {
		for _, e := range m.VoteRecord {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHasVotedVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHasVotedVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HasVotedVoter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHasVotedVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHasVotedVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HasVotedVoter) > 0 {
		for _, e := range m.HasVotedVoter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetElectionResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ElectionID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetElectionResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ElectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Results) > 0 {
		for k, v := range m.Results {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + sovQuery(uint64(v))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteRecord = append(m.VoteRecord, VoteRecord{})
			if err := m.VoteRecord[len(m.VoteRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHasVotedVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHasVotedVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHasVotedVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHasVotedVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHasVotedVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHasVotedVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasVotedVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HasVotedVoter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHasVotedVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHasVotedVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHasVotedVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHasVotedVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHasVotedVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHasVotedVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasVotedVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasVotedVoter = append(m.HasVotedVoter, HasVotedVoter{})
			if err := m.HasVotedVoter[len(m.HasVotedVoter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetElectionResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetElectionResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetElectionResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElectionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetElectionResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetElectionResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetElectionResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Results == nil {
				m.Results = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Results[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
